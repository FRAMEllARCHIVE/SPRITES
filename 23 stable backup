
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no, maximum-scale=1.0, minimum-scale=1.0">
    <title>Animation Controller</title>
    <style>
        body {
            display: flex;
            justify-content: center;
            align-items: center;
            margin: 0;
            overflow: hidden;
            background-color: black;
            position: relative;
            user-select: none;
        }
        #gameArea {
            position: relative;
            width: 82vmin;
            height: 82vmin;
            background-color: #ddd;
            border-radius: 3vh;
            overflow: hidden;
        }

    #player, #chaser {
    position: absolute;
    width: 100px;
    height: 100px;
    transform: translate(-50%, -50%);
    transition: top 0.1s, left 0.1s;
}
        #player {
           background-image: url('spritesheet.png');
}
        #chaser {
            background-image: url('spritesheet.png');
}

        #joypad {
            position: absolute;
            bottom: 10%;
            left: 10%;
            width: 100px;
            height: 100px;
            border-radius: 50%;
            background-color: rgba(0, 0, 0, 0.5);
            display: flex;
            justify-content: center;
            align-items: center;
        }
        #joypadInner {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            background-color: rgba(255, 255, 255, 0.7);
            position: absolute;
            pointer-events: none;
        }
    </style>
</head>
<body>
    <div id="gameArea">
        <div id="player" class="A"></div>
        <div id="chaser" class="A"></div>
    
    </div>
    <div id="joypad">
        <div id="joypadInner"></div>
    </div>

<script>
    const directions = [
        "idle", "S", "SSW", "SW", "SWW", "W", "NWW", "NW", "NNW", "N", 
        "NNE", "NE", "NEE", "E", "SEE", "SE", "SSE"
    ];
    const frames = [1, 2, 3];
    const directionOffset = 100;
    const frameOffset = 100;

    const style = document.createElement('style');
    document.head.appendChild(style);

    let css = ".A { background-repeat: no-repeat; display: block; }";
    directions.forEach((direction, dirIndex) => {
        frames.forEach((frame, frameIndex) => {
            const x = -dirIndex * directionOffset;
            const y = -frameIndex * frameOffset;
            css += `.${direction}${frame} { background-position: ${x}px ${y}px; } `;
        });
    });

    style.textContent = css;
</script>

    <script>
    const player = document.getElementById('player');
    const joypad = document.getElementById('joypad');
    const joypadInner = document.getElementById('joypadInner');
    const directions = { SSW: 'SSW', SW: 'SW', W: 'W', NW: 'NW', N: 'N', NE: 'NE', E: 'E', SEE: 'SEE', SE: 'SE', S: 'S', SWW: 'SWW', NWW: 'NWW', SSE: 'SSE', NNE: 'NNE', NNW: 'NNW', NEE: 'NEE' };
    let posX = 50, posY = 50;
    let velocityX = 0, velocityY = 0;
    const friction = 0.06;
    const maxSpeed = 0.8;
    let animationFrame = 1;
    const maxFrames = 3;
    let idleFrame = 1;
    const maxIdleFrames = 3;
    let joypadCenter = { x: 0, y: 0 };
    let joypadRadius = joypad.offsetWidth / 2;
    let isIdle = true;

    let joystickActive = false;
    let joystickAngle = 0;
    let joystickDistance = 0;

    const frameRate = 60;
    const animationFrameRate = 5;
    const animationInterval = 1000 / animationFrameRate;
    let lastAnimationTime = 0;
    let direction = 'S';

    let gamepadIndex = null;

    function updateJoypadCenter() {
        const rect = joypad.getBoundingClientRect();
        joypadCenter.x = rect.left + joypad.offsetWidth / 2;
        joypadCenter.y = rect.top + joypad.offsetHeight / 2;
    }

    function moveJoypadInner(x, y) {
        const dx = x - joypadCenter.x;
        const dy = y - joypadCenter.y;
        joystickDistance = Math.min(Math.sqrt(dx * dx + dy * dy), joypadRadius);
        joystickAngle = Math.atan2(dy, dx);

        joypadInner.style.left = `${Math.cos(joystickAngle) * joystickDistance + joypadRadius - joypadInner.offsetWidth / 2}px`;
        joypadInner.style.top = `${Math.sin(joystickAngle) * joystickDistance + joypadRadius - joypadInner.offsetHeight / 2}px`;

        calculateDirectionFromJoystick(joystickAngle);
        joystickActive = true;
    }


        function calculateDirectionFromJoystick(angle) {
        const angleDeg = (angle * (180 / Math.PI) + 360) % 360;

        if (angleDeg >= 348.75 || angleDeg < 11.25) direction = 'E';
        else if (angleDeg >= 11.25 && angleDeg < 33.75) direction = 'SEE';
        else if (angleDeg >= 33.75 && angleDeg < 56.25) direction = 'SE';
        else if (angleDeg >= 56.25 && angleDeg < 78.75) direction = 'SSE';
        else if (angleDeg >= 78.75 && angleDeg < 101.25) direction = 'S';
        else if (angleDeg >= 101.25 && angleDeg < 123.75) direction = 'SSW';
        else if (angleDeg >= 123.75 && angleDeg < 146.25) direction = 'SW';
        else if (angleDeg >= 146.25 && angleDeg < 168.75) direction = 'SWW';
        else if (angleDeg >= 168.75 && angleDeg < 191.25) direction = 'W';
        else if (angleDeg >= 191.25 && angleDeg < 213.75) direction = 'NWW';
        else if (angleDeg >= 213.75 && angleDeg < 236.25) direction = 'NW';
        else if (angleDeg >= 236.25 && angleDeg < 258.75) direction = 'NNW';
        else if (angleDeg >= 258.75 && angleDeg < 281.25) direction = 'N';
        else if (angleDeg >= 281.25 && angleDeg < 303.75) direction = 'NNE';
        else if (angleDeg >= 303.75 && angleDeg < 326.25) direction = 'NE';
        else if (angleDeg >= 326.25 && angleDeg < 348.75) direction = 'NEE';
}

    function updateAnimation(timestamp) {
        if (timestamp - lastAnimationTime > animationInterval) {
            lastAnimationTime = timestamp;

            if (isIdle) {
                player.className = `A idle${idleFrame}`;
                idleFrame = (idleFrame % maxIdleFrames) + 1;
            } else {
                player.className = `A ${directions[direction]}${animationFrame}`;
                animationFrame = (animationFrame % maxFrames) + 1;
            }
        }
    }

    function updatePosition() {
        if (joystickActive) {
            velocityX = Math.cos(joystickAngle) * (joystickDistance / joypadRadius) * maxSpeed;
            velocityY = Math.sin(joystickAngle) * (joystickDistance / joypadRadius) * maxSpeed;
        } else {
            velocityX *= (1 - friction);
            velocityY *= (1 - friction);
        }

        posX += velocityX;
        posY += velocityY;

        posX = Math.max(0, Math.min(100, posX));
        posY = Math.max(0, Math.min(100, posY));

        player.style.left = `${posX}%`;
        player.style.top = `${posY}%`;

        isIdle = !joystickActive && Math.abs(velocityX) < 0.01 && Math.abs(velocityY) < 0.01;
    }

    function handleGamepadInput() {
        if (gamepadIndex === null) return;

        const gamepad = navigator.getGamepads()[gamepadIndex];
        if (!gamepad) return;

        const threshold = 0.2;
        const axisX = gamepad.axes[0];
        const axisY = gamepad.axes[1];

        if (Math.abs(axisX) > threshold || Math.abs(axisY) > threshold) {
            joystickAngle = Math.atan2(axisY, axisX);
            joystickDistance = Math.min(Math.sqrt(axisX ** 2 + axisY ** 2), 1) * joypadRadius;

            calculateDirectionFromJoystick(joystickAngle);
            joystickActive = true;
        } else {
            joystickActive = false;
        }
    }

    function connectGamepad(event) {
        gamepadIndex = event.gamepad.index;
        console.log(`Gamepad connected: ${event.gamepad.id}`);
        joypad.style.opacity = '0';
    }

    function disconnectGamepad(event) {
        console.log(`Gamepad disconnected: ${event.gamepad.id}`);
        if (gamepadIndex === event.gamepad.index) {
            gamepadIndex = null;
        }
        joypad.style.opacity = '1';
    }
        
function gameLoop(timestamp) {
    handleGamepadInput();
    updatePosition();
    updateChaser(timestamp);
    updateAnimation(timestamp);
    requestAnimationFrame(gameLoop);
}

    window.addEventListener('gamepadconnected', connectGamepad);
    window.addEventListener('gamepaddisconnected', disconnectGamepad);

    joypad.addEventListener('touchstart', (event) => {
        updateJoypadCenter();
        moveJoypadInner(event.touches[0].clientX, event.touches[0].clientY);
    });

    joypad.addEventListener('touchmove', (event) => {
        moveJoypadInner(event.touches[0].clientX, event.touches[0].clientY);
    });

    joypad.addEventListener('touchend', (event) => {
        if (event.touches.length === 0) {
            joystickActive = false;
            velocityX = 0;
            velocityY = 0;
            joypadInner.style.left = `${joypadRadius - joypadInner.offsetWidth / 2}px`;
            joypadInner.style.top = `${joypadRadius - joypadInner.offsetHeight / 2}px`;
        }
    });

        //chaser logic
let chaserVelocityX = 0, chaserVelocityY = 0;
const chaserFriction = 0.06;
let chaserDirection = 'S';
let chaserAnimationFrame = 1;
let lastChaserAnimationTime = 0;
const chaser = document.getElementById('chaser');
let chaserX = 20, chaserY = 20;
const chaserSpeed = 0.02;

function calculateDirectionFromVelocity(vx, vy) {
    const angle = Math.atan2(vy, vx);
    const angleDeg = (angle * (180 / Math.PI) + 360) % 360;

    if (angleDeg >= 348.75 || angleDeg < 11.25) return 'E';
    else if (angleDeg >= 11.25 && angleDeg < 33.75) return 'SEE';
    else if (angleDeg >= 33.75 && angleDeg < 56.25) return 'SE';
    else if (angleDeg >= 56.25 && angleDeg < 78.75) return 'SSE';
    else if (angleDeg >= 78.75 && angleDeg < 101.25) return 'S';
    else if (angleDeg >= 101.25 && angleDeg < 123.75) return 'SSW';
    else if (angleDeg >= 123.75 && angleDeg < 146.25) return 'SW';
    else if (angleDeg >= 146.25 && angleDeg < 168.75) return 'SWW';
    else if (angleDeg >= 168.75 && angleDeg < 191.25) return 'W';
    else if (angleDeg >= 191.25 && angleDeg < 213.75) return 'NWW';
    else if (angleDeg >= 213.75 && angleDeg < 236.25) return 'NW';
    else if (angleDeg >= 236.25 && angleDeg < 258.75) return 'NNW';
    else if (angleDeg >= 258.75 && angleDeg < 281.25) return 'N';
    else if (angleDeg >= 281.25 && angleDeg < 303.75) return 'NNE';
    else if (angleDeg >= 303.75 && angleDeg < 326.25) return 'NE';
    else if (angleDeg >= 326.25 && angleDeg < 348.75) return 'NEE';
}
        
function updateChaser(timestamp) {
    const dx = posX - chaserX;
    const dy = posY - chaserY;
    const distance = Math.sqrt(dx * dx + dy * dy);

    if (distance > 0.5) {
        chaserVelocityX += (dx / distance) * chaserSpeed;
        chaserVelocityY += (dy / distance) * chaserSpeed;
    }

    chaserVelocityX *= (1 - chaserFriction);
    chaserVelocityY *= (1 - chaserFriction);

    chaserX += chaserVelocityX;
    chaserY += chaserVelocityY;

    chaserX = Math.max(0, Math.min(100, chaserX));
    chaserY = Math.max(0, Math.min(100, chaserY));

    chaser.style.left = `${chaserX}%`;
    chaser.style.top = `${chaserY}%`;

    if (Math.abs(chaserVelocityX) > 0.01 || Math.abs(chaserVelocityY) > 0.01) {
        chaserDirection = calculateDirectionFromVelocity(chaserVelocityX, chaserVelocityY);
    }

    if (timestamp - lastChaserAnimationTime > animationInterval) {
        chaser.className = `A ${directions[chaserDirection]}${chaserAnimationFrame}`;
        chaserAnimationFrame = (chaserAnimationFrame % maxFrames) + 1;
        lastChaserAnimationTime = timestamp;
    }
}

    gameLoop(0);
</script>
</body>
</html>
