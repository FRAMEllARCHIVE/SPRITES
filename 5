<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Directional Animation Controller</title>
    <style>
        body {
            display: flex;
            justify-content: center;
            align-items: center;
            margin: 0;
            overflow: hidden;
            background-color: black;
            position: relative;
            user-select: none;
        }
        #gameArea {
            position: relative;
            width: 82vmin;
            height: 82vmin;
            background-color: #ddd;
            border-radius: 3vh;
            overflow: hidden;
        }
        #player {
            position: absolute;
            width: 100px;
            height: 100px;
            transform: translate(-50%, -50%);
            transition: top 0.1s, left 0.1s;
        }
        .A {
            background-image: url('spritesheet.png');
            background-repeat: no-repeat;
            display: block;
        }
        .SSW1 { background-position: -200px -0px; }
        .SSW2 { background-position: -200px -100px; }
        .SSW3 { background-position: -200px -200px; }
        .SW1 { background-position: -300px -0px; }
        .SW2 { background-position: -300px -100px; }
        .SW3 { background-position: -300px -200px; }
        .W1 { background-position: -500px -0px; }
        .W2 { background-position: -500px -100px; }
        .W3 { background-position: -500px -200px; }
        .NW1 { background-position: -700px -0px; }
        .NW2 { background-position: -700px -100px; }
        .NW3 { background-position: -700px -200px; }
        .N1 { background-position: -900px -0px; }
        .N2 { background-position: -900px -100px; }
        .N3 { background-position: -900px -200px; }
        .NE1 { background-position: -1100px -0px; }
        .NE2 { background-position: -1100px -100px; }
        .NE3 { background-position: -1100px -200px; }
        .E1 { background-position: -1300px -0px; }
        .E2 { background-position: -1300px -100px; }
        .E3 { background-position: -1300px -200px; }
        .SEE1 { background-position: -1400px -0px; }
        .SEE2 { background-position: -1400px -100px; }
        .SEE3 { background-position: -1400px -200px; }
        .SE1 { background-position: -1500px -0px; }
        .SE2 { background-position: -1500px -100px; }
        .SE3 { background-position: -1500px -200px; }
        .S1 { background-position: -100px -0px; }
        .S2 { background-position: -100px -100px; }
        .S3 { background-position: -100px -200px; }
        .idleFrame { background-position: -0px -0px; }
        #joypad {
            position: absolute;
            bottom: 10%;
            right: 10%;
            width: 100px;
            height: 100px;
            border-radius: 50%;
            background-color: rgba(0, 0, 0, 0.5);
            display: flex;
            justify-content: center;
            align-items: center;
        }
        #joypadInner {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            background-color: rgba(255, 255, 255, 0.7);
            position: absolute;
            pointer-events: none;
        }
    </style>
</head>
<body>
    <div id="gameArea">
        <div id="player" class="A idleFrame"></div>
    </div>
    <div id="joypad">
        <div id="joypadInner"></div>
    </div>
    <script>
        const player = document.getElementById('player');
        const joypad = document.getElementById('joypad');
        const joypadInner = document.getElementById('joypadInner');
        const directions = { SSW: 'SSW', SW: 'SW', W: 'W', NW: 'NW', N: 'N', NE: 'NE', E: 'E', SEE: 'SEE', SE: 'SE', S: 'S' };
        const idleFrame = 'idleFrame';
        let posX = 50, posY = 50;
        let direction = 'S';
        let velocityX = 0, velocityY = 0;
        const friction = 0.06;
        const maxSpeed = 0.8;
        let animationFrame = 1;
        const maxFrames = 3;
        let joypadCenter = { x: 0, y: 0 };
        let joypadRadius = joypad.offsetWidth / 2;
        let activeInput = false;
        let isIdle = true;

        function updateJoypadCenter() {
            const rect = joypad.getBoundingClientRect();
            joypadCenter.x = rect.left + joypad.offsetWidth / 2;
            joypadCenter.y = rect.top + joypad.offsetHeight / 2;
        }

        function moveJoypadInner(x, y) {
            const dx = x - joypadCenter.x;
            const dy = y - joypadCenter.y;
            const distance = Math.min(Math.sqrt(dx * dx + dy * dy), joypadRadius);
            const angle = Math.atan2(dy, dx);
            joypadInner.style.left = `${Math.cos(angle) * distance + joypadRadius - joypadInner.offsetWidth / 2}px`;
            joypadInner.style.top = `${Math.sin(angle) * distance + joypadRadius - joypadInner.offsetHeight / 2}px`;
            velocityX = Math.cos(angle) * Math.min(distance / joypadRadius, 1) * maxSpeed;
            velocityY = Math.sin(angle) * Math.min(distance / joypadRadius, 1) * maxSpeed;
            calculateDirectionFromJoystick(angle);
            activeInput = true;
        }

        function calculateDirectionFromJoystick(angle) {
            const angleDeg = (angle * (180 / Math.PI) + 360) % 360;
            if (angleDeg < 22.5 || angleDeg >= 337.5) direction = 'E';
            else if (angleDeg >= 22.5 && angleDeg < 67.5) direction = 'SEE';
            else if (angleDeg >= 67.5 && angleDeg < 112.5) direction = 'SE';
            else if (angleDeg >= 112.5 && angleDeg < 157.5) direction = 'S';
            else if (angleDeg >= 157.5 && angleDeg < 202.5) direction = 'SW';
            else if (angleDeg >= 202.5 && angleDeg < 247.5) direction = 'W';
            else if (angleDeg >= 247.5 && angleDeg < 292.5) direction = 'NW';
            else if (angleDeg >= 292.5 && angleDeg < 337.5) direction = 'N';
        }

        function updateAnimation() {
            if (isIdle) {
                player.className = `A ${idleFrame}`;
            } else {
                player.className = `A ${directions[direction]}${animationFrame}`;
                animationFrame = (animationFrame % maxFrames) + 1;
            }
        }

        function updatePosition() {
            if (!activeInput) {
                velocityX *= (1 - friction);
                velocityY *= (1 - friction);
            }
            posX += velocityX;
            posY += velocityY;
            posX = Math.max(0, Math.min(100, posX));
            posY = Math.max(0, Math.min(100, posY));
            player.style.left = posX + '%';
            player.style.top = posY + '%';
            isIdle = Math.abs(velocityX) <= 0.01 && Math.abs(velocityY) <= 0.01;
            updateAnimation();
        }

        function gameLoop() {
            updatePosition();
            requestAnimationFrame(gameLoop);
        }

        joypad.addEventListener('mousedown', (e) => {
            e.preventDefault();
            updateJoypadCenter();
            moveJoypadInner(e.clientX, e.clientY);
            window.addEventListener('mousemove', onMove);
            window.addEventListener('mouseup', onEnd);
        });

        const onMove = (e) => moveJoypadInner(e.clientX, e.clientY);

        const onEnd = () => {
            activeInput = false;
            joypadInner.style.left = `${joypadRadius - joypadInner.offsetWidth / 2}px`;
            joypadInner.style.top = `${joypadRadius - joypadInner.offsetHeight / 2}px`;
            window.removeEventListener('mousemove', onMove);
            window.removeEventListener('mouseup', onEnd);
        };

        requestAnimationFrame(gameLoop);
    </script>
</body>
</html>
